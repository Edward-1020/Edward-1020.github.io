<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[快速排序]]></title>
    <url>%2F2017%2F12%2F01%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[快速排序随机快排的流程 在一个数组中，随机确定一个数num。 &lt; num 的放左边， = num 的放中间，&gt; num的放右边 递归的重复上过程，将左边的部分排好。 递归的重复上过程，将右边的部分排好。 如此这般，重复，直到整个数组排好。 快速排序过程 随机选择一个数 randomNum 将array[array.length - 1] 与 array[randomNum] 交换位置。即，随机选择的数与原数组中最后一个数交换位置 然后 &lt; array[array.length - 1] 的放右边， &gt; 的放左边， = 的放中间，那么这个过程怎么做？ 将随机选择的数设为p，p放到数组末尾。 数组分为3个部分： 1&lt;p 区域+ 原数组 + &gt; p 区域 m作为一个指针，扫描原数组 m = 0，array[0] &lt; p , 此时m继续向下走，m++ m = 1，array[1] &lt; p，那么array[m] 与 &lt; p 区域的下一个数交换位置。然后m++，即 &lt; p 的区域增加了一个位置。 即一个数，它 =p , m++；它 &lt;p，就与&lt;p的区域的下一数交换位置，m++。这样 = p的在一个区域, &lt;p的在一个区域。 m = 2, array[2] &gt; p, 那么array[m] 与 &gt; p 区域的前一个数交换位置, m 原地不动，不加不减， &gt; p 的区域增加了一个位置。 继续看此时，array[m] 是 = p的，还是 &lt; p的，还是 &gt; p 的。重复上述过程。 一旦m与 &gt; p 的区域碰上，整个过程停止。 该过程也叫荷兰国旗问题， partition的过程 我们递归调用partition的过程，多个 = p 区域的部分合起来，就是排好序的数组了代码这里解释我们排序思想的关键部分，详细代码请见我的GitHub1234567891011121314151617181920212223242526272829303132333435363738394041424344// 这里解释partition部分，同时也是荷兰国旗问题// 要partition的数组是arr，左边界是l，右边界是rfunction partition (arr, l, r) &#123; //小于区域为less，大于区域为more let less = l - 1 let more = r //l作为扫描数组的指针，是不能碰到 大于区域 的边界的。当l = more 的时候整个区域都调完了 while (l &lt; more) &#123; //如果arr[l]的值 小于 我们选择的划分值 arr[r] (此时我们选择的值已经放在了数组的最末位了)，less 区域扩大一位，将此时less指向的数值与我们的arr[l]交换。保证less 代表的小于区域是小于我们选择的 划分值 arr[r]的。l要继续向前进一位。 //只有arr[l]和arr[r]相等时，l和less的才会错开，即less区域的下一位上的数值不管怎样，一定是等于arr[r]的。即交换后的arr[l]知道了自己所在的范围。所以l++，指向下一个数去确定它在哪个区域。 if (arr[l] &lt; arr[r]) &#123; swap(arr, ++less, l++) &#125; //如果arr[l]的值 大于 我们选择的划分值arr[r]，more区域就要扩一位，此时more代表的数值要与我们arr[l]交换。因为我们想要中间的区域是等于 划分值arr[r]的，又因为我们根本不确定此时的arr[l]即之前的减过一位的arr[more]是否等于arr[r]，所以我们的 l 不动。 //即我们将more的前一位与已知自己所在范围的arr[l]交换过来了，此时的arr[l]是不知道自己所在范围的，所以我们的l不动。 if (arr[l] &gt; arr[r]) &#123; swap(arr, --more; l) &#125; //相等，没什么好说的，l指向下一位 if (arr[l] = arr[r]) &#123; l++ &#125; //最后还剩下一个等于划分值arr[r]很早被我们安排在了末尾，我们让它和 大于区 的边界上的第一个数交换, 此时原more位置上的数是arr[r]，原r位置上的数是arr[more]。 swap(arr, more, r) //这样做到了 小于划分值的在左边，大于划分值的在右边，等于划分值的在中间。 //返回等于区的左边界和右边界 return [less + 1, more] &#125;&#125;&#125; 时间复杂度 第1步 选一个随机的划分值。 O(1) 第2部 分为三个部分 p，在partition的过程，要么l向右走，要么more向左走，l和more碰上就会停止。所以partition的过程是进行长度的次数。O(n) 第三部 左侧和右侧剩下的 &gt;p 和 p 或者 &lt;p 的部分特别大，那么我们递归的复杂度就很大。 如果划分值每次都在第一个或者最后一个，那么复杂度就会很差。是O(n^2) 我们选择划分值选随机值，可以避免上面说的情况。并且我们希望我们的算法不与输入数的规律有关。 随机选，我们不会轻易给出一个最差情况的例子。我们的时间复杂度是一个概率表达，与数据的规律无关。 随机选，我们运气好，划分值选在中间位置。 p的区域是N/2的数量级。那么我们时间频度的公式 T(N) = O(1) + O(N) + 2T(N/2)（2T(N/2)是左右区域递归），即T(N) = 2T(N/2) + O(1) mater公式 T(n) = aT(N/b) + O(N^d) aT(N/b)是递归规模，O(N^d)是递归行为之外的复杂度 如果 log(b，a) = d ，那么复杂度O(n^d * logN ) 如果 log(b，a) &gt; d ，那么复杂度O( n^(log(b, a) ) ),即以b为底 如果 log(b，a) &lt; d ，那么复杂度O(n^d ) 由于master公式，我们可以得在情况很好的情况是 n*logn，因为随机划分值，所以不会出现最差情况O(n^2)。 空间复杂度 快速排序中，额外空间复杂度最低为O(logN)。为什么？1.要记录中间断点的位置，做左侧递归，再做右侧递归。2.为什么要记录中间断点的位置？先做完左侧递归，才去做右侧递归，做完左侧递归，一定要知道中间断点的位置，你才能去进行右侧递归。3.你每一次的递归都需要打断点。第一次打一个断点，第二次打2个断点，第三次打4个断点，这样就形成了一个树。4.因为断点使用完是会释放的，所以这棵树有多高，我们就打几个断点。5.这棵树有多高？数组的长度决定了树的高度，即log(2)N就是树的高度。6.所以记录 logN 个的断点位置 的 这些个变量你是省不下来的。 稳定性快速排序可以做到稳定性，是论文级别的！ 扩展要求奇数放在左边，偶数放在右边，要求奇数和偶数在排序的过程中，相对次序保持不变，且不给额外空间，不用额外数组。能做到吗？ 回答：不能。 我们将奇数和偶数作为一个标准，奇数是1，看作大于某一个数 ， &gt;=p；偶数是0，看作小于等于某一个数 &lt;=p。奇数 如果我们能完成这道题，相当于完成了partition，这是做不到的。如果你做到了，快排就稳定了。]]></content>
      <categories>
        <category>JavaScript经典算法</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript经典排序算法--快速排序的引子]]></title>
    <url>%2F2017%2F11%2F29%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BC%95%E5%AD%90%2F</url>
    <content type="text"><![CDATA[快速排序的引子A和B两数组，想找在B中存在但是在A中不存的数？ 二分如果数组的长度为N，每一次分一半，一共能分几次？是 log2(N)简称为logN 思路及时间复杂度分析 A和B两数组，想找在B中存在但是在A中不存的数。A的长度为N，B的长度为M 笨办法从B中拿出一个，在A中遍历。这样时间复杂度O(m * n) 好办法1.将A排序 O(A)2因为A是有序的，所以B中的每一个数可以通过2分的方式确定在A中有没有。O(logN M)3.复杂度为 O(A) + O(logN M)4.看 加号 两边 谁大， 复杂度就是谁（只要高阶）5.所以看对A排序，怎么做比较好，时间复杂度低 在数组[L, R]中找中位数L + (L - R) &gt;&gt; 1 正确(L + R) / 2 是可能溢出的 代码这里解释我们算法思想的关键部分12345678910111213141516171819202122232425262728293031// 两数组 A 和 B，其中数组A是有序的for (let i = 0; i &lt; B.length; i++) &#123;// l 是数组A的左边界， r 是数组A的右边界 let l = 0 let r = A.length - 1 let contains = false // 循环以下过程确定，B[i]是否在A数组中// A的中位数是A[mid]// 遍历B，B[i]比A[mid]大，则在左边部分 r = mid - 1// B[i]比A[mid]小，则在右边部分 l = mid + 1// b[i] 等于 A[mid]，则正好在中点 while (l &lt;= r) &#123; let mid = l + ((r - l) &gt;&gt; 1) if (A[mid] === B[i]) &#123; contains = true &#125; if (A[mid] &gt; B[i]) &#123; r = mid - 1 &#125; else &#123; l = mid + 1 &#125; &#125; if (!contains) &#123; result.push(B[i]) &#125;&#125;]]></content>
      <categories>
        <category>JavaScript经典算法</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript经典排序算法--选择排序]]></title>
    <url>%2F2017%2F11%2F29%2FJavaScript%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[选择排序时间复杂度O(n^2)，额外空间复杂度O(1)，实现不可以做到稳定性 选择排序过程 第一轮排序在 0 到 n - 1 的范围内，找一个最小的放在 0 这个位置。 第二轮排序在 1 到 n - 1 的范围内，找一个最小的放在 1 这个位置。 第三轮排序在 2 到 n - 1 的范围内，找一个最小的放在 2 这个位置。 省略 第 n - 1 排序最后一个不用动了，数组已经排好了。 代码这里解释我们排序思想的关键部分，详细代码请见我的GitHub123456789101112131415// 因为第 i 轮排序，会确定 第 i 个位置为本轮未排序数组范围内的最小值, 从 0 位置开始第一轮// 所以 let i = 0// 因为最后一个数不需要动了，1个数确定是该范围内最小的毫无意义// 所以 i &lt; arr.length - 1for (let i = 0; i&lt; arr.length - 1; i++) &#123;// 从该轮未排序的数组范围内，找最小的数，并放到未排序的数组范围内的第一个位置 let minIndex = i for (let j = i + 1; j &lt; arr.length; j++) &#123; minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex &#125; swap(arr, i, minIndex)&#125; 时间复杂度时间频度公式是一个等差数列，去掉低阶项，却掉常数项，时间复杂度为O(n ^ 2) 空间复杂度只用了常数级别的辅助项，所以空间复杂度为O(1) 稳定性因为每次选择最小的和未排序的部分的第一个位置交换，所以可能存在相对次序的改变，所以是不稳定的 思想总结每一次都选择最小的放在未排序的第一个位置]]></content>
      <categories>
        <category>JavaScript经典算法</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript经典排序算法--插入排序]]></title>
    <url>%2F2017%2F11%2F28%2FJavaScript%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[插入排序时间复杂度O(n^2)，额外空间复杂度O(1)，实现可以做到稳定性 插入排序过程 第一轮比较位置0上的数前无比较数组，不动。 第二轮比较位置1上的数与位置0上的数比较，如果array[1] &lt; array[0]，则交换两者的位置 第三轮比较位置2上的数与位置1上的数比较，如果array[2] &lt; array[1]，则交换两者的位置。此时，位置1上的数与位置0上的数比较，如果array[1] &lt; array[0]。则交换两者的位置。 如果在比较的过程中发现，后一个数 &gt;= 前一个数，停止本轮比较 省略过程 第 n - 1 轮比较所有数都经过上述的插入过程，整个数组就有序了。 和冒泡排序的区别冒泡排序是将数组中的元素向外冒，每一轮都会确定本次比较范围最大的数。而插入排序的每一轮是将数组中的元素向前面有序的数组中插。 代码这里解释我们排序思想的关键部分，详细代码请见我的GitHub1234567891011121314151617181920212223242526// 0位置上的数是不需要插入的，我们从1位置开始插。// 所以 let i = 1// 因为最后一次的需要向前面有序数组插排的是 n - 1 位置上的数// 所以 i &lt; arr.length// 因为每一轮插排，需要往前插的数的位置，都会往后移一位。 // 所以i++for (let i = 1; i &lt; arr.length; i++) &#123;// i是与其前面的有序数组中的元素进行比较的// 所以 j 从 i - 1开始， j = i - 1// 比较到 有序数组的 0 位置// 所以 j &gt; = 0// 什么时候交换一次位置？// 当前一个比后一个 &gt; 时，交换一次位置// 然后再往前推一位(j--),再次比较交换位置，直到前一个 &lt;= 后一个(不满足 arr[j] &gt; arr[j+1])// 上述是交换位置应该满足的条件 即 arr[j] &gt; arr[j+1] for (let j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; arr[j+1]; j--) &#123; swap(arr, j, j+1) &#125;&#125;function swap (arr, i, j) &#123; [arr[i], arr[j]] = [arr[j], arr[i]]&#125; 时间复杂度这里，数组中每个元素都要和前面的有序数组一个一个比较，所以其时间频度是个等差数列，时间复杂度是O(n^2) 空间复杂度这里我们用有限的空间去做排序，所以是O(1) 稳定性数组中元素再向前比较时，因为 &lt;= 有序数组中的某一个元素时就停止了，所以相同的元素之间的相对顺序不变，是稳定的。 思想总结类似于插扑克，每一个数和它前面的一组有序的数比较，将其正确的插入有序区。最后，整个数组就有序了。]]></content>
      <categories>
        <category>JavaScript经典算法</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript经典排序算法--冒泡排序]]></title>
    <url>%2F2017%2F11%2F26%2FJavaScript%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[冒泡排序冒泡排序的过程 第一轮比较：范围是 0 ~ n - 1。过程是：对于给定的一个数组，第一个数和第二个数比较，哪个大就将该数放在后面。紧接着第二个数和第三个数比较，哪个大就将该数放在后面。依次类推，最大的数就会放在数组最后的位置。 第二轮比较：范围是 0 ~ n - 2过程是：同上，第二大的数就放在了数组倒数第二个位置 省略 第 n - 1 轮比较：重复以上的过程，直到最后一次排序时只剩下一个数，我们就可以得到一个有序的数组了。 代码这里解释我们排序思想的关键部分，详细代码请见我的GitHub 1234567891011121314151617181920// 外循环确定我们要排的位置, let e = arr.length - 1// 我们排到只剩下0位置的数时，e &gt; 0 ,结束外循环// 每次排的数组范围都减少1，因为每次排完最后一个位置一定是本次所排序范围的最大值，e--for (let e = arr.length - 1; e &gt; 0; e --) &#123;// 从本次要排的范围的第一个位置开始排 let i = 0// 确定排序范围 i &lt; e// 排序的基本工程，依次向后比 i ++ for (let i = 0; i &lt; e; i++) &#123; if (arr[i] &gt; arr[i+1]) &#123; swap(arr, i, i+1) &#125; &#125;&#125;// 交换function swap (arr, i, j) &#123; [arr[i], arr[j]] = [arr[j], arr[i]]&#125;]]></content>
      <categories>
        <category>JavaScript经典算法</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数式编程是奇淫巧技吗？]]></title>
    <url>%2F2017%2F11%2F25%2F%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%98%AF%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80%E5%90%97%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[函数式编程是奇淫巧技吗？JavaScript本身的语法特性以及各种各样函数式库的流行，让函数式编程这个话题越来越热。本文秉承存在即合理的概念，探究函数式编程给我们的代码带来的优点。 一等公民在Javascript的世界里，函数是一等公民。那么，一等公民是什么意思呢？一言蔽之，函数在JavaScript中并不是一个特殊的存在，它可以作为参数传递，也可以作为返回值，它的地位是和一个普通对象一样的。下面做个对比来提现一等公民的优势：12345// 滥用一等公民特性的做法// 不必要的对函数做封装const getServerData = (url) =&gt; &#123; return ajaxCall(url)&#125; 如果哪天我们的回调要增加错误处理，我们便需要修改两个部分：ajaxCall和getServerData。1234// 同时我们的ajaxCall函数本身也有添加errconst getServerData = (url) =&gt; &#123; return ajaxCall(url, err)&#125; 正确的做法应该如此直接：1getServerData(url, ajaxCall) 当我们使用高阶函数特性时，一定要小心命名，小心定义参数，这可以帮助我们少做修改，毕竟修改导致变化，而变化会导致bug。而命名的科学可以帮我们少造轮子。 纯函数什么是纯函数，纯函数的意义在哪？在数学上，我们是这么定义一个函数的：对于每一个输入只返回一个特定的输出值。在我们编写程序时，当我们封装的函数内部状态不纯时，我们的输出就会出乎我们的意料。出乎意料就意味着bug，且是难以排查的bug。 我们举一些可能使函数不纯的操作： http请求 可变的数据 用户输入 Dom查询 例如：当你的函数改变了某个data，而结果不是你想要的。这时你发现另外的一个函数监听这个data做了另一份操作。对，我就是在说Vue的watch，vue的灵活性真是让我又爱又恨。 一等公民和纯函数的意义Javascript中函数的一等公民的特性给与了我们一种思想：将业务分解为一个又一个耦合度小的颗粒，行为，让我们以函数作为载体进行编程。这使得： 函数命名清晰使得语义化 函数颗粒度小使得可复用性高 纯函数行为单一，副作用少 可维护性更好 为了引出柯里化和组合下面让我们来看一个例子：需求是给定一个数，先加2再扩2倍，等到一个新数组。123// 很简单哦!let num = arry.map(x =&gt; x + 2)let newArray = arrayAdd2.map(x =&gt; x * 2) 这个时候，需求变了：先扩2倍再扩加212let arrayDoubles = array.map(x =&gt; x * 2)let newArray = arrayDoubles.map(x =&gt; x + 2) 累吗？当然我们的需求不会这么简单 柯里化（curry）和组合（compose）让我们创造一个curry来享受一下函数式编程给我们带来的愉悦享受：12345const add = (x) =&gt; (y) =&gt; x + yconst add2 = add(2)add2(3) //5const add3 = add(3)add3(3) //6 从上面这个简单的例子我们可以看出，柯里化的概念：只传给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。 下面让我们来看看组合（compose）,也是一段贴心小代码12345const compose = (f, g) =&gt; x =&gt; f(g(x))const f1 = x =&gt; x * 2const f2 = x =&gt; x + 2const nice = compose(f1, f2)nice(3) // 10 这个简单例子向我们阐述了组合的概念：f和g是两个功能单一的函数，它们彼此结合产生了一个解决你需求的新函数，而这个x便是数据流通的管道。想象一下没有组合的世界，好像少那么一点美感（可读性）：12345const f1 = x =&gt; x * 2const f2 = x =&gt; x + 2const nice = (x) =&gt; &#123; return f1(f2(x))&#125; 在这里我们强调一点：我们的数据流动方向是从右至左。记得webpack的loader的处理方向么？从右至左。没错，compose的概念。 使用柯里化和组合优化我们的代码还记得我们的需求么？给定一个数，先加2再扩2倍，等到一个新数组。变为了：先扩2倍再加2123456789const f1 = x =&gt; x * 2const f2 = x =&gt; x + 2const perfectFn = (...fns) =&gt; x =&gt; fns.reduceRight((val, fn) =&gt; fn(val))// 先加2再扩2倍const resultFn = perfectFn(f1, f2)resultFn(3) // 10// 先扩2倍再加2const resultFn1 = perfectFn(f2, f1)resultFn1(3) // 8 其实只改动传入函数的位置而已。这里牵扯到了闭包保存了fns所在的环境，这里不再做解释了。有兴趣的同学可以查一下资料。 小结可以看出来函数式编程并不是一个宗教，而是我们应对工程的一种手段。它和面向对象等编程思想并不冲突，都是为了我们能够更好为业务服务。]]></content>
      <categories>
        <category>JavaScript之美</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
</search>
